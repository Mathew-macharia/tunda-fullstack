<script setup>
import { RouterLink, RouterView } from 'vue-router'
import HelloWorld from './components/HelloWorld.vue'
</script>

<template>
  <div id="app" class="min-h-screen bg-gray-50">
    <!-- Navigation -->
    <nav class="bg-white shadow-lg sticky top-0 z-50">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between h-16">
          <!-- Logo and main navigation -->
          <div class="flex items-center">
            <router-link to="/" class="flex items-center space-x-2">
              <div class="w-8 h-8 bg-green-600 rounded-lg flex items-center justify-center">
                <span class="text-white font-bold text-sm">T</span>
              </div>
              <span class="text-xl font-bold text-gray-900">Tunda Soko</span>
            </router-link>
            
            <!-- Desktop navigation -->
            <div class="hidden md:ml-8 md:flex md:space-x-8">
              <router-link to="/products" class="nav-link">Products</router-link>
              
              <template v-if="isAuthenticated">
                <!-- Customer navigation -->
                <template v-if="isCustomer">
                  <router-link to="/customer" class="nav-link">Dashboard</router-link>
                  <router-link to="/cart" class="nav-link flex items-center space-x-1">
                    <span>Cart</span>
                    <span v-if="cartItemsCount > 0" 
                          class="bg-green-600 text-white text-xs rounded-full px-2 py-1 min-w-5 text-center">
                      {{ cartItemsCount }}
                    </span>
                  </router-link>
                  <router-link to="/orders" class="nav-link">Orders</router-link>
                </template>
                
                <!-- Farmer navigation -->
                <template v-if="isFarmer">
                  <router-link to="/farmer" class="nav-link">Dashboard</router-link>
                  <router-link to="/farmer/farms" class="nav-link">Farms</router-link>
                  <router-link to="/farmer/listings" class="nav-link">Listings</router-link>
                  <router-link to="/farmer/orders" class="nav-link">Orders</router-link>
                </template>
                
                <!-- Rider navigation -->
                <template v-if="isRider">
                  <router-link to="/rider" class="nav-link">Dashboard</router-link>
                  <router-link to="/rider/deliveries" class="nav-link">Deliveries</router-link>
                </template>
                
                <!-- Admin navigation -->
                <template v-if="isAdmin">
                  <router-link to="/admin" class="nav-link">Dashboard</router-link>
                  <router-link to="/admin/users" class="nav-link">Users</router-link>
                  <router-link to="/admin/orders" class="nav-link">Orders</router-link>
                  <router-link to="/admin/settings" class="nav-link">Settings</router-link>
                </template>
              </template>
            </div>
          </div>
          
          <!-- Right side navigation -->
          <div class="flex items-center space-x-4">
            <template v-if="isAuthenticated">
              <!-- User dropdown -->
              <div class="relative" ref="userDropdown">
                <button @click="toggleDropdown" 
                        class="flex items-center space-x-2 text-gray-700 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 rounded-md p-2">
                  <div class="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center">
                    <span class="text-sm font-medium text-gray-700">
                      {{ getUserName.charAt(0).toUpperCase() }}
                    </span>
                  </div>
                  <span class="hidden sm:block">{{ getUserName }}</span>
                  <svg class="w-4 h-4 transition-transform duration-200" 
                       :class="{ 'rotate-180': showUserDropdown }"
                       fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                  </svg>
                </button>
                
                <!-- Dropdown menu -->
                <div v-show="showUserDropdown" 
                     class="absolute right-0 mt-2 w-48 bg-white rounded-md shadow-lg py-1 z-50 border border-gray-200">
                  <div class="px-4 py-2 text-sm text-gray-700 border-b border-gray-200">
                    <div class="font-medium">{{ getUserName }}</div>
                    <div class="text-xs text-gray-500">{{ getUserRoleDisplay }}</div>
                  </div>
                  <router-link to="/profile" class="dropdown-item" @click="closeDropdown">Profile</router-link>
                  <button @click="handleLogout" class="dropdown-item w-full text-left">Logout</button>
                </div>
              </div>
            </template>
            
            <template v-else>
              <router-link to="/login" class="btn-secondary">Login</router-link>
              <router-link to="/register" class="btn-primary">Register</router-link>
            </template>
            
            <!-- Mobile menu button -->
            <button @click="showMobileMenu = !showMobileMenu" 
                    class="md:hidden p-2 rounded-md text-gray-700 hover:text-gray-900 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-green-500">
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                      :d="showMobileMenu ? 'M6 18L18 6M6 6l12 12' : 'M4 6h16M4 12h16M4 18h16'"></path>
              </svg>
            </button>
          </div>
        </div>
        
        <!-- Mobile menu -->
        <div v-if="showMobileMenu" class="md:hidden border-t border-gray-200 py-4">
          <div class="space-y-2">
            <router-link to="/products" class="mobile-nav-link">Products</router-link>
            
            <template v-if="isAuthenticated">
              <!-- Customer mobile navigation -->
              <template v-if="isCustomer">
                <router-link to="/customer" class="mobile-nav-link">Dashboard</router-link>
                <router-link to="/cart" class="mobile-nav-link">
                  Cart <span v-if="cartItemsCount > 0" class="text-green-600">({{ cartItemsCount }})</span>
                </router-link>
                <router-link to="/orders" class="mobile-nav-link">Orders</router-link>
              </template>
              
              <!-- Farmer mobile navigation -->
              <template v-if="isFarmer">
                <router-link to="/farmer" class="mobile-nav-link">Dashboard</router-link>
                <router-link to="/farmer/farms" class="mobile-nav-link">Farms</router-link>
                <router-link to="/farmer/listings" class="mobile-nav-link">Listings</router-link>
                <router-link to="/farmer/orders" class="mobile-nav-link">Orders</router-link>
              </template>
              
              <!-- Rider mobile navigation -->
              <template v-if="isRider">
                <router-link to="/rider" class="mobile-nav-link">Dashboard</router-link>
                <router-link to="/rider/deliveries" class="mobile-nav-link">Deliveries</router-link>
              </template>
              
              <!-- Admin mobile navigation -->
              <template v-if="isAdmin">
                <router-link to="/admin" class="mobile-nav-link">Dashboard</router-link>
                <router-link to="/admin/users" class="mobile-nav-link">Users</router-link>
                <router-link to="/admin/orders" class="mobile-nav-link">Orders</router-link>
                <router-link to="/admin/settings" class="mobile-nav-link">Settings</router-link>
              </template>
              
              <div class="border-t border-gray-200 pt-2 mt-2">
                <router-link to="/profile" class="mobile-nav-link">Profile</router-link>
                <button @click="handleLogout" class="mobile-nav-link w-full text-left">Logout</button>
              </div>
            </template>
            
            <template v-else>
              <router-link to="/login" class="mobile-nav-link">Login</router-link>
              <router-link to="/register" class="mobile-nav-link">Register</router-link>
            </template>
          </div>
        </div>
      </div>
    </nav>
    
    <!-- Main content -->
    <main class="flex-1">
      <router-view />
    </main>
    
    <!-- Loading overlay -->
    <div v-if="isLoading" class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div class="bg-white rounded-lg p-6 flex items-center space-x-3">
        <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-green-600"></div>
        <span class="text-gray-700">Loading...</span>
      </div>
    </div>
    
    <!-- Toast notifications -->
    <div class="fixed top-4 right-4 z-50 space-y-2">
      <div v-for="toast in toasts" 
           :key="toast.id"
           :class="`toast-${toast.type}`"
           class="max-w-sm w-full bg-white shadow-lg rounded-lg pointer-events-auto flex ring-1 ring-black ring-opacity-5">
        <div class="flex-1 w-0 p-4">
          <div class="flex items-start">
            <div class="ml-3 flex-1">
              <p class="text-sm font-medium text-gray-900">{{ toast.title }}</p>
              <p v-if="toast.message" class="mt-1 text-sm text-gray-500">{{ toast.message }}</p>
            </div>
          </div>
        </div>
        <div class="flex border-l border-gray-200">
          <button @click="removeToast(toast.id)" 
                  class="w-full border border-transparent rounded-none rounded-r-lg p-4 flex items-center justify-center text-sm font-medium text-gray-600 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-green-500">
            ×
          </button>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
import { ref, computed, onMounted, onUnmounted } from 'vue'
import { useRouter } from 'vue-router'
import { 
  user, 
  isAuthenticated, 
  isLoading, 
  isCustomer, 
  isFarmer, 
  isRider, 
  isAdmin,
  getUserName,
  getUserRoleDisplay,
  logout 
} from '@/stores/auth'
import { cartAPI } from '@/services/api'

export default {
  name: 'App',
  setup() {
    const router = useRouter()
    const showMobileMenu = ref(false)
    const showUserDropdown = ref(false)
    const userDropdown = ref(null)
    const cartItemsCount = ref(0)
    const toasts = ref([])
    
    // Close dropdowns when clicking outside
    const handleClickOutside = (event) => {
      if (userDropdown.value && !userDropdown.value.contains(event.target)) {
        showUserDropdown.value = false
      }
    }
    
    // Handle dropdown toggle
    const toggleDropdown = () => {
      console.log('Dropdown toggled, current state:', showUserDropdown.value)
      showUserDropdown.value = !showUserDropdown.value
    }
    
    const closeDropdown = () => {
      showUserDropdown.value = false
    }
    
    // Load cart count for customers
    const loadCartCount = async () => {
      if (isCustomer.value && isAuthenticated.value) {
        try {
          const cart = await cartAPI.getCart()
          cartItemsCount.value = cart.items_count || 0
        } catch (error) {
          console.error('Failed to load cart count:', error)
        }
      }
    }
    
    // Handle logout
    const handleLogout = async () => {
      logout()
      showUserDropdown.value = false
      showMobileMenu.value = false
      cartItemsCount.value = 0
      await router.push('/')
      showToast('success', 'Logged out successfully')
    }
    
    // Toast notifications
    let toastIdCounter = 0
    const showToast = (type, title, message = '', duration = 5000) => {
      const id = ++toastIdCounter
      toasts.value.push({ id, type, title, message })
      
      setTimeout(() => {
        removeToast(id)
      }, duration)
    }
    
    const removeToast = (id) => {
      const index = toasts.value.findIndex(toast => toast.id === id)
      if (index > -1) {
        toasts.value.splice(index, 1)
      }
    }
    
    // Global error handler
    window.addEventListener('unhandledrejection', (event) => {
      console.error('Unhandled promise rejection:', event.reason)
      showToast('error', 'Something went wrong', 'Please try again')
    })
    
    onMounted(() => {
      document.addEventListener('click', handleClickOutside)
      loadCartCount()
      
      // Listen for cart updates
      window.addEventListener('cartUpdated', loadCartCount)
    })
    
    onUnmounted(() => {
      document.removeEventListener('click', handleClickOutside)
      window.removeEventListener('cartUpdated', loadCartCount)
    })
    
    return {
      // Auth state
      user,
      isAuthenticated,
      isLoading,
      isCustomer,
      isFarmer,
      isRider,
      isAdmin,
      getUserName,
      getUserRoleDisplay,
      
      // UI state
      showMobileMenu,
      showUserDropdown,
      userDropdown,
      cartItemsCount,
      toasts,
      
      // Methods
      toggleDropdown,
      closeDropdown,
      handleLogout,
      showToast,
      removeToast
    }
  }
}
</script>

<style scoped>
.nav-link {
  @apply text-gray-700 hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium transition-colors duration-200;
}

.nav-link.router-link-active {
  @apply text-green-600 bg-green-50;
}

.mobile-nav-link {
  @apply block px-3 py-2 text-base font-medium text-gray-700 hover:text-gray-900 hover:bg-gray-50 rounded-md transition-colors duration-200;
}

.mobile-nav-link.router-link-active {
  @apply text-green-600 bg-green-50;
}

.dropdown-item {
  @apply block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 transition-colors duration-200;
}

.btn-primary {
  @apply bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2;
}

.btn-secondary {
  @apply text-gray-700 hover:text-gray-900 px-4 py-2 rounded-md text-sm font-medium border border-gray-300 hover:border-gray-400 transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2;
}

.toast-success {
  @apply border-l-4 border-green-400;
}

.toast-error {
  @apply border-l-4 border-red-400;
}

.toast-warning {
  @apply border-l-4 border-yellow-400;
}

.toast-info {
  @apply border-l-4 border-blue-400;
}
</style>
